This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)


================================================================
Directory Structure
================================================================
.gitignore
eslint.config.js
index.html
package.json
public/vite.svg
README.md
src/App.css
src/App.jsx
src/assets/react.svg
src/components/Cart.jsx
src/components/Product.jsx
src/components/ProductList.jsx
src/components/TransactionHistory.jsx
src/components/WalletConnector.jsx
src/context/CartContext.jsx
src/index.css
src/main.jsx
vite.config.js

================================================================
Files
================================================================

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{js,jsx}'],
    extends: [
      js.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    rules: {
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
    },
  },
])

================
File: index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>marketplace</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "marketplace",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@creit.tech/stellar-wallets-kit": "^1.9.5",
    "@stellar/stellar-sdk": "^14.2.0",
    "react": "^19.1.1",
    "react-dom": "^19.1.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.36.0",
    "@types/react": "^19.1.16",
    "@types/react-dom": "^19.1.9",
    "@vitejs/plugin-react": "^5.0.4",
    "eslint": "^9.36.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.22",
    "globals": "^16.4.0",
    "vite": "npm:rolldown-vite@7.1.14"
  },
  "overrides": {
    "vite": "npm:rolldown-vite@7.1.14"
  }
}

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: README.md
================
# Stellar Marketplace: Template

Welcome to this advanced walkthrough where you'll build an improved decentralized marketplace on the Stellar blockchain!
By the end of this guide, you'll have a more feature-rich web application that connects to Stellar wallets, supports multiple payments, and introduces new marketplace functionality.

## What You'll Build

A modern decentralized marketplace where users can:

Connect their Stellar wallet (xBull or Freighter)

Browse and purchase products in XLM

Add products to a shopping cart

View recent transactions

(Optional) Add new products through a seller dashboard

Enjoy a more interactive, polished interface

## Prerequisites

Basic understanding of React and JavaScript

Node.js installed on your computer

A Stellar wallet (we’ll use Freighter or xBull)

A code editor (VS Code recommended)

## Step 1: Project Setup

Create Your Project

Open your terminal and run these commands:

```bash
# Create a new React project
npm create vite@latest marketplace --template react

# Navigate to the project folder
cd marketplace

# Install required packages
npm install @stellar/stellar-sdk
npm install @creit.tech/stellar-wallets-kit

# Start the development server
npm run dev
```

Your app should now be running at http://localhost:5173

Install a Stellar Wallet

Before you begin coding, install one of these Stellar wallets:

Freighter: freighter.app

xBull: xbull.app

Once installed, switch to TESTNET in your wallet settings.

## Step 2: Understanding the Project Structure

Your project will have the following structure:

marketplace/
├── src/
│   ├── components/
│   │   ├── WalletConnector.jsx
│   │   ├── Product.jsx
│   │   ├── ProductList.jsx
│   │   ├── Cart.jsx
│   │   ├── SellerDashboard.jsx
│   │   └── TransactionHistory.jsx
│   ├── context/
│   │   └── CartContext.jsx
│   ├── App.jsx
│   ├── App.css
│   └── main.jsx
└── vite.config.js

## Step 3: Configure Vite (vite.config.js)

Replace the contents of vite.config.js with:

```bash
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  define: {
    global: 'window',
  },
})
```

Why this matters:
This configuration ensures that the Stellar SDK can run smoothly in a browser environment by defining global as window.

## Step 4: Create the Wallet Connector Component

Create src/components/WalletConnector.jsx:

```bash
function WalletConnector({ onConnect }) {
  const wallets = [
    { id: 'xbull', name: 'xBull' },
    { id: 'freighter', name: 'Freighter' },
  ];

  return (
    <div className="wallet-connector">
      <h2>Connect Your Wallet</h2>
      <div>
        {wallets.map(wallet => (
          <button key={wallet.id} onClick={() => onConnect(wallet.id)}>
            Connect with {wallet.name}
          </button>
        ))}
      </div>
    </div>
  );
}

export default WalletConnector;
```

What this does:
Creates simple wallet connection buttons that allow users to connect to either xBull or Freighter.

## Step 5: Create the Main App Component

Replace src/App.jsx with:

```bash
import { useState } from 'react';
import {
  StellarWalletsKit,
  WalletNetwork,
  xBullModule,
  FreighterModule,
  XBULL_ID
} from '@creit.tech/stellar-wallets-kit';
import { Horizon, Networks } from '@stellar/stellar-sdk';
import WalletConnector from './components/WalletConnector';
import ProductList from './components/ProductList';
import TransactionHistory from './components/TransactionHistory';
import SellerDashboard from './components/SellerDashboard';
import Cart from './components/Cart';
import './App.css';

const kit = new StellarWalletsKit({
  network: WalletNetwork.TESTNET,
  selectedWalletId: XBULL_ID,
  modules: [new xBullModule(), new FreighterModule()],
});

const server = new Horizon.Server('https://horizon-testnet.stellar.org');

function App() {
  const [publicKey, setPublicKey] = useState(null);
  const [status, setStatus] = useState('');

  const handleConnect = async (walletId) => {
    try {
      await kit.setWallet(walletId);
      const { address } = await kit.getAddress();
      setPublicKey(address);
      setStatus(`Connected with public key: ${address.slice(0, 6)}...`);
    } catch (error) {
      console.error('Connection failed:', error);
      setStatus('Failed to connect wallet.');
    }
  };

  return (
    <div className="app">
      <h1>Stellar Marketplace (Enhanced)</h1>
      <WalletConnector onConnect={handleConnect} />
      <p>{status}</p>

      {publicKey && (
        <>
          <ProductList publicKey={publicKey} kit={kit} server={server} setStatus={setStatus} />
          <Cart publicKey={publicKey} kit={kit} server={server} setStatus={setStatus} />
          <SellerDashboard publicKey={publicKey} server={server} />
          <TransactionHistory publicKey={publicKey} server={server} />
        </>
      )}

      <p className="note">
        Need test XLM? Use{' '}
        <a href="https://friendbot.stellar.org" target="_blank" rel="noopener noreferrer">
          Friendbot
        </a>.
      </p>
    </div>
  );
}

export default App;
```

What this does:

Initializes wallet connections

Displays marketplace components only after a wallet is connected

Shows real-time transaction feedback

## Step 6: Add Product Components

Create src/components/Product.jsx and src/components/ProductList.jsx.
These handle displaying products, adding to the cart, and making payments in XLM.

You can extend them to include:

Product images

Seller details

Custom asset types (tokens other than XLM)

## Step 7: Add Context for Cart

Create src/context/CartContext.jsx:

```bash
import { createContext, useState, useContext } from 'react';

const CartContext = createContext();

export function CartProvider({ children }) {
  const [cart, setCart] = useState([]);

  const addToCart = (product) => setCart([...cart, product]);
  const removeFromCart = (id) => setCart(cart.filter(item => item.id !== id));
  const clearCart = () => setCart([]);

  return (
    <CartContext.Provider value={{ cart, addToCart, removeFromCart, clearCart }}>
      {children}
    </CartContext.Provider>
  );
}

export const useCart = () => useContext(CartContext);
```

What this does:
Manages global cart state across components, enabling persistent and sharable cart functionality.

## Step 8: Add Styling

Replace src/App.css with:

```bash
.app {
  max-width: 900px;
  margin: 0 auto;
  padding: 20px;
  font-family: Arial, sans-serif;
}

.wallet-connector, .product, .cart, .dashboard {
  border: 1px solid #ddd;
  border-radius: 8px;
  padding: 20px;
  margin-bottom: 20px;
  background-color: #f9f9f9;
}

button {
  background-color: #007bff;
  color: white;
  border: none;
  padding: 10px 16px;
  border-radius: 4px;
  cursor: pointer;
}

button:hover {
  background-color: #0056b3;
}

.note {
  margin-top: 20px;
  padding: 10px;
  background-color: #fff3cd;
  border-radius: 4px;
}
```

What this does:
Applies a clean layout and consistent design for wallet connection, products, and marketplace views.

## Step 9: Test Your Application

Start the development server:

npm run dev


Get test XLM from Friendbot

Connect your wallet (xBull or Freighter)

Add products to your cart and purchase them

View your transaction history

Understanding Key Additions
New Features Introduced

Shopping Cart — Add multiple items and purchase in one go

Transaction History — View previous purchases directly in the app

Seller Dashboard — Add and manage listings

Improved UI — Clean, responsive, and user-friendly design

Core Concepts

Wallet Connection: Using Stellar Wallets Kit for xBull and Freighter

Transaction Building: Creating and signing payments on Testnet

Cart State Management: Using React context for global data

Blockchain Interaction: Reading and writing data via Horizon API

Common Issues and Solutions

Wallet won’t connect:
Ensure you’ve switched your wallet to Testnet.

Transaction fails:
Check your XLM balance and request more test funds via Friendbot.

App won’t start:
Make sure dependencies are installed with npm install.

## Next Steps

Now that you’ve built an enhanced marketplace, try adding:

User authentication and profiles

Product images stored on IPFS

Custom Stellar assets (tokens)

Backend API for persistence

Mobile-friendly UI improvements

Congratulations!

You’ve successfully built an upgraded decentralized marketplace on Stellar!
You now understand:

Wallet integration and blockchain payments

Transaction lifecycle from signing to confirmation

State management for cart and transactions

How to expand a tutorial into a full-featured app

Keep experimenting and continue building new decentralized ideas on the Stellar network!

================
File: src/App.css
================
/* Modern Design System */
:root {
  --primary: #6366f1;
  --primary-dark: #4f46e5;
  --secondary: #8b5cf6;
  --success: #10b981;
  --warning: #f59e0b;
  --danger: #ef4444;
  --bg-dark: #0f172a;
  --bg-card: #1e293b;
  --bg-hover: #334155;
  --text-primary: #f1f5f9;
  --text-secondary: #94a3b8;
  --border: #334155;
  --shadow: rgba(0, 0, 0, 0.3);
}

.app {
  max-width: 1200px;
  margin: 0 auto;
  padding: 40px 20px;
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
  min-height: 100vh;
  background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
}

/* Header Styling */
.app h1 {
  font-size: 3rem;
  font-weight: 800;
  text-align: center;
  margin-bottom: 3rem;
  background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  letter-spacing: -0.02em;
  animation: fadeInDown 0.6s ease-out;
}

/* Wallet Connector Card */
.wallet-connector {
  margin-bottom: 2rem;
  padding: 2rem;
  background: var(--bg-card);
  border: 1px solid var(--border);
  border-radius: 16px;
  box-shadow: 0 10px 40px var(--shadow);
  animation: fadeInUp 0.6s ease-out;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.wallet-connector:hover {
  transform: translateY(-2px);
  box-shadow: 0 15px 50px rgba(99, 102, 241, 0.2);
}

.wallet-connector h2 {
  margin-top: 0;
  margin-bottom: 1.5rem;
  color: var(--text-primary);
  font-size: 1.5rem;
  font-weight: 700;
}

.wallet-connector > div {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1rem;
}

.wallet-connector button {
  margin: 0;
  padding: 1rem 1.5rem;
  background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
  color: white;
  border: none;
  border-radius: 12px;
  cursor: pointer;
  font-weight: 600;
  font-size: 1rem;
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
  box-shadow: 0 4px 15px rgba(99, 102, 241, 0.3);
}

.wallet-connector button::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s ease;
}

.wallet-connector button:hover::before {
  left: 100%;
}

.wallet-connector button:hover {
  transform: translateY(-2px);
  box-shadow: 0 6px 25px rgba(99, 102, 241, 0.5);
}

.wallet-connector button:active {
  transform: translateY(0);
}

/* Status Message */
.app > p {
  text-align: center;
  padding: 1rem;
  margin: 1.5rem 0;
  border-radius: 12px;
  background: var(--bg-card);
  border: 1px solid var(--border);
  color: var(--text-primary);
  font-weight: 500;
  animation: fadeIn 0.5s ease-out;
  box-shadow: 0 4px 15px var(--shadow);
}

/* Product List */
.product-list {
  margin-top: 3rem;
  animation: fadeInUp 0.6s ease-out 0.2s both;
}

.product-list h2 {
  font-size: 2rem;
  font-weight: 700;
  margin-bottom: 2rem;
  color: var(--text-primary);
  text-align: center;
}

.product-image {
  max-width: 200px;
  height: auto;
  border-radius: 12px;
  margin-bottom: 1rem;
}

/* Product Cards */
.product {
  border: 1px solid var(--border);
  border-radius: 16px;
  padding: 2rem;
  margin: 1.5rem 0;
  background: linear-gradient(135deg, var(--bg-card) 0%, #1a2332 100%);
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
  box-shadow: 0 8px 30px var(--shadow);
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
}

.product::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 4px;
  background: linear-gradient(90deg, var(--primary), var(--secondary));
  transform: scaleX(0);
  transition: transform 0.3s ease;
}

.product:hover::before {
  transform: scaleX(1);
}

.product:hover {
  transform: translateY(-4px);
  box-shadow: 0 12px 40px rgba(99, 102, 241, 0.2);
  border-color: var(--primary);
}

.product h3 {
  margin: 0 0 1rem 0;
  color: var(--text-primary);
  font-size: 1.5rem;
  font-weight: 700;
}

.product > p:first-of-type {
  font-size: 1.25rem;
  color: var(--secondary);
  font-weight: 700;
  margin: 0.5rem 0 1.5rem 0;
}

.product button {
  background: linear-gradient(135deg, var(--success) 0%, #059669 100%);
  color: white;
  border: none;
  padding: 0.875rem 2rem;
  border-radius: 12px;
  cursor: pointer;
  font-weight: 600;
  font-size: 1rem;
  transition: all 0.3s ease;
  box-shadow: 0 4px 15px rgba(16, 185, 129, 0.3);
  position: relative;
  overflow: hidden;
}

.product button::after {
  content: '→';
  position: absolute;
  right: 1.5rem;
  opacity: 0;
  transition: all 0.3s ease;
}

.product button:hover::after {
  opacity: 1;
  right: 1rem;
}

.product button:hover {
  transform: translateY(-2px);
  box-shadow: 0 6px 25px rgba(16, 185, 129, 0.5);
  padding-right: 2.5rem;
}

.product button:active {
  transform: translateY(0);
}

.product > p:last-of-type {
  margin-top: 1rem;
  padding: 0.75rem;
  border-radius: 8px;
  background: rgba(99, 102, 241, 0.1);
  border: 1px solid rgba(99, 102, 241, 0.2);
  color: var(--text-secondary);
  font-weight: 500;
  text-align: center;
  min-height: 1.5rem;
}

/* Note/Info Box */
.note {
  margin-top: 3rem;
  padding: 1.5rem;
  background: linear-gradient(135deg, rgba(245, 158, 11, 0.1) 0%, rgba(251, 191, 36, 0.05) 100%);
  border: 1px solid rgba(245, 158, 11, 0.3);
  border-radius: 12px;
  font-size: 0.95rem;
  color: var(--text-primary);
  text-align: center;
  animation: fadeIn 0.6s ease-out 0.4s both;
}

.note a {
  color: var(--warning);
  font-weight: 600;
  text-decoration: none;
  transition: color 0.3s ease;
  border-bottom: 2px solid transparent;
}

.note a:hover {
  color: #fbbf24;
  border-bottom-color: #fbbf24;
}

/* Animations */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeInDown {
  from {
    opacity: 0;
    transform: translateY(-30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

/* Responsive Design */
@media (max-width: 768px) {
  .app h1 {
    font-size: 2rem;
  }
  
  .wallet-connector > div {
    grid-template-columns: 1fr;
  }
  
  .product {
    padding: 1.5rem;
  }
}

================
File: src/App.jsx
================
import { useState } from 'react';
import { XBULL_ID, FreighterModule, xBullModule, WalletNetwork, StellarWalletsKit } from '@creit.tech/stellar-wallets-kit';
import { Horizon, Networks } from '@stellar/stellar-sdk';
import WalletConnector from './components/WalletConnector';
import ProductList from './components/ProductList';
import TransactionHistory from './components/TransactionHistory';
import Cart from './components/Cart';
import './App.css';

const kit = new StellarWalletsKit({
  network: WalletNetwork.TESTNET,
  selectedWalletId: XBULL_ID,
  modules: [new xBullModule(), new FreighterModule()],
});

const server = new Horizon.Server('https://horizon-testnet.stellar.org');

function App() {
  const [publicKey, setPublicKey] = useState(null);
  const [status, setStatus] = useState('');

  const handleConnect = async (walletId) => {
    try {
      await kit.setWallet(walletId);
      const { address } = await kit.getAddress();
      setPublicKey(address);
      setStatus(`Connected with public key: ${address.slice(0, 6)}...`);
    } catch (error) {
      console.error('Connection failed:', error);
      setStatus('Failed to connect wallet.');
    }
  };

  return (
    <div className="app">
      <h1>Stellar Market</h1>
      <WalletConnector onConnect={handleConnect} />
      <p>{status}</p>
      {publicKey && (
        <>
          <ProductList publicKey={publicKey} kit={kit} server={server} setStatus={setStatus} />
          <Cart publicKey={publicKey} kit={kit} server={server} setStatus={setStatus} />
          <TransactionHistory publicKey={publicKey} server={server} />
        </>
      )}
      <p className="note">
        Need test XLM? Use{' '}
        <a href="https://friendbot.stellar.org" target="_blank" rel="noopener noreferrer">
          Friendbot
        </a>.
      </p>
    </div>
  );
}

export default App;

================
File: src/assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: src/components/Cart.jsx
================
import { useCart } from '../context/CartContext';
import { useState } from 'react';
import { TransactionBuilder, Operation, Asset, Networks, Transaction } from '@stellar/stellar-sdk';


function Cart({ publicKey, kit, server, setStatus }) {
  const { cartItems, totalPrice, clearCart } = useCart(); 
  const [processing, setProcessing] = useState(false);

  const handleCheckout = async () => {
    if (!publicKey || cartItems.length === 0) return;
    setProcessing(true);
    setStatus('Processing checkout...');
    try {

      const account = await server.loadAccount(publicKey);

      const transaction = new TransactionBuilder(account, {
        fee: await server.fetchBaseFee(),
        networkPassphrase: Networks.TESTNET,
      });


      const sellers = {};
      cartItems.forEach(item => {
        if (!sellers[item.seller]) {
          sellers[item.seller] = 0;
        }
        sellers[item.seller] += parseFloat(item.price) * item.quantity;
      });

      Object.entries(sellers).forEach(([seller, amount]) => {
        transaction.addOperation(
          Operation.payment({
            destination: seller,
            asset: Asset.native(), 
            amount: amount.toFixed(7), 
          })
        );
      });


      const builtTransaction = transaction.setTimeout(30).build(); 

      const { signedTxXdr } = await kit.signTransaction(builtTransaction.toXDR(), {
        address: publicKey,
        networkPassphrase: Networks.TESTNET,
      });


      const signedTransaction = TransactionBuilder.fromXDR(signedTxXdr, Networks.TESTNET);

   
      await server.submitTransaction(signedTransaction);

      setStatus(`Successfully purchased ${cartItems.length} items!`);
      clearCart(); 
    } catch (error) {
      console.error('Checkout failed:', error);
      setStatus('Checkout failed. Check console for details.');
    } finally {
      setProcessing(false);
    }
  };

  if (cartItems.length === 0) {
    return (
      <div className="cart empty-cart">
        <p>Your cart is empty</p>
      </div>
    );
  }

  return (
    <div className="cart">
      <h2>Your Cart</h2>
      <div className="cart-items">
        {cartItems.map(item => (
          <div key={item.id} className="cart-item">
            <img src={item.image} alt={item.name} className="cart-item-image" />
            <div className="cart-item-details">
              <h3>{item.name}</h3>
              <p>{item.quantity} × {item.price} XLM</p>
            </div>
          </div>
        ))}
      </div>
      <div className="cart-summary">
        <p>Total: {totalPrice.toFixed(2)} XLM</p>
        <button
          onClick={handleCheckout}
          disabled={processing || !publicKey} 
        >
          {processing ? 'Processing...' : 'Checkout'}
        </button>
      </div>
    </div>
  );
}

export default Cart;

================
File: src/components/Product.jsx
================
import { useState } from 'react';
import { TransactionBuilder, Operation, Asset, Networks } from '@stellar/stellar-sdk';
import { useCart } from '../context/CartContext';

function Product({ product, publicKey, kit, server, setStatus }) {
  const [localStatus, setLocalStatus] = useState('');

  const { addToCart } = useCart();

  const handleBuy = async () => {
    setLocalStatus('Processing...');
    setStatus('Processing payment...');

    try {
      // Step 1: Load buyer's account from Stellar network
      const account = await server.loadAccount(publicKey);

      // Step 2: Build the payment transaction
      const transaction = new TransactionBuilder(account, {
        fee: await server.fetchBaseFee(),
        networkPassphrase: Networks.TESTNET,
      })
      .addOperation(
        Operation.payment({
          destination: product.seller,
          asset: Asset.native(), // XLM
          amount: product.price,
        })
      )
      .setTimeout(30)
      .build();

      // Step 3: Sign transaction with user's wallet
      const { signedTxXdr } = await kit.signTransaction(transaction.toXDR(), {
        address: publicKey,
        networkPassphrase: Networks.TESTNET,
      });

      // Step 4: Submit transaction to Stellar network
      const signedTransaction = TransactionBuilder.fromXDR(signedTxXdr, Networks.TESTNET);
      await server.submitTransaction(signedTransaction);

      setLocalStatus('Purchase successful!');
      setStatus(`Successfully bought ${product.name}!`);
    } catch (error) {
      console.error('Purchase failed:', error);
      setLocalStatus('Purchase failed.');
      setStatus('Payment failed. Check console for details.');
    }
  };

  return (
    <div className="product">
      {product.image && (
        <img 
          src={product.image} 
          alt={product.name} 
          className="product-image"
        />
      )}
      <h3>{product.name}</h3>
      <p>Price: {product.price} XLM</p>
      <button onClick={handleBuy}>Buy</button>
      <button onClick={() => addToCart(product)}>Add to Cart</button>
      <button onClick={handleBuy}>Buy Now</button>
      <p>{localStatus}</p>
    </div>
  );
}

export default Product;

================
File: src/components/ProductList.jsx
================
import Product from './Product';
import tshirtImg from '../assets/products/tshirt.jpg';
import mugImg from '../assets/products/mug.jpg';

const products = [
  { 
    id: 1, 
    name: 'Stellar T-Shirt', 
    price: '5', 
    seller: 'GB66WWJBXVTB4WLTSMTRBADE2IYUHGEPOHJCBDJ4W3YQTZYTXLOXNTHL',
    image: tshirtImg
  },
  { 
    id: 2, 
    name: 'Stellar Mug', 
    price: '5', 
    seller: 'GB66WWJBXVTB4WLTSMTRBADE2IYUHGEPOHJCBDJ4W3YQTZYTXLOXNTHL',
    image: mugImg
  },
];

const tokenOptions = [
  { code: 'XLM', issuer: null, name: 'Lumens' },
  { 
    code: 'USDC', 
    issuer: 'GA5ZSEJYB37JRC5AVCIA5MOP4RHTM335X2KGX3IHOJAPP5RE34K4KZVN', 
    name: 'USD Coin' 
  },
  { 
    code: 'BTC', 
    issuer: 'GAUTUYY2USFTMQ623754DHX2RUMQ7V45TGTYOISG6N2LNCVYQ66554LZ', 
    name: 'Bitcoin' 
  }
];

function ProductList({ publicKey, kit, server, setStatus }) {
  return (
    <div className="product-list">
      <h2>Available Products</h2>
      {products.map((product) => (
        <Product
          key={product.id}
          product={product}
          publicKey={publicKey}
          kit={kit}
          server={server}
          setStatus={setStatus}
          tokenOptions={tokenOptions}
        />
      ))}
    </div>
  );
}

export default ProductList;

================
File: src/components/TransactionHistory.jsx
================
// src/components/TransactionHistory.jsx
import { useState, useEffect } from 'react';

function TransactionHistory({ publicKey, server }) {
  const [transactions, setTransactions] = useState([]);
  const [loading, setLoading] = useState(true);
  
  useEffect(() => {
    const fetchTransactions = async () => {
      try {
        // Fetch user's transactions
        const transactionsResponse = await server
          .transactions()
          .forAccount(publicKey)
          .limit(10)
          .order('desc')
          .call();
          
        // Filter for marketplace transactions
        const marketplaceTransactions = transactionsResponse.records.filter(tx => {
          const destination = tx.to;
          return [
            'GB66WWJBXVTB4WLTSMTRBADE2IYUHGEPOHJCBDJ4W3YQTZYTXLOXNTHL',
            'GB66WWJBXVTB4WLTSMTRBADE2IYUHGEPOHJCBDJ4W3YQTZYTXLOXNTHLNF3ZD'
          ].includes(destination);
        });
        
        setTransactions(marketplaceTransactions);
        setLoading(false);
      } catch (error) {
        console.error('Failed to fetch transactions:', error);
        setLoading(false);
      }
    };
    
    if (publicKey) {
      fetchTransactions();
    }
  }, [publicKey, server]);
  
  if (!publicKey) return null;
  
  return (
    <div className="transaction-history">
      <h2>Transaction History</h2>
      {loading ? (
        <p>Loading transactions...</p>
      ) : transactions.length === 0 ? (
        <p>No transactions found</p>
      ) : (
        <div className="transactions-list">
          {transactions.map(tx => (
            <div key={tx.hash} className="transaction-item">
              <div className="transaction-details">
                <p>Purchased: {tx.asset_type === 'native' ? 'XLM' : tx.asset_code}</p>
                <p>Amount: {tx.amount}</p>
                <p>Date: {new Date(tx.created_at).toLocaleDateString()}</p>
                <p>Status: {tx.successful ? 'Completed' : 'Failed'}</p>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}

export default TransactionHistory;

================
File: src/components/WalletConnector.jsx
================
import { useState } from 'react';

function WalletConnector({ onConnect }) {
  const wallets = [
    { id: 'xbull', name: 'xBull' },
    { id: 'freighter', name: 'Freighter' },
  ];

  const handleSelectWallet = (walletId) => {
    onConnect(walletId);
  };

  return (
    <div className="wallet-connector">
      <h2>Connect Your Wallet</h2>
      <div>
        {wallets.map((wallet) => (
          <button 
            key={wallet.id} 
            onClick={() => handleSelectWallet(wallet.id)}
          >
            Connect with {wallet.name}
          </button>
        ))}
      </div>
    </div>
  );
}

export default WalletConnector;

================
File: src/context/CartContext.jsx
================
// src/context/CartContext.jsx
import { createContext, useContext, useState, useEffect } from 'react';

const CartContext = createContext();

export function CartProvider({ children }) {
  const [cartItems, setCartItems] = useState([]);
  
  // Load cart from localStorage on initial load
  useEffect(() => {
    const savedCart = localStorage.getItem('stellar-marketplace-cart');
    if (savedCart) {
      setCartItems(JSON.parse(savedCart));
    }
  }, []);
  
  // Save cart to localStorage
  useEffect(() => {
    localStorage.setItem('stellar-marketplace-cart', JSON.stringify(cartItems));
  }, [cartItems]);
  
  const addToCart = (product) => {
    setCartItems(prevItems => {
      const existingItem = prevItems.find(item => item.id === product.id);
      if (existingItem) {
        return prevItems.map(item => 
          item.id === product.id ? { ...item, quantity: item.quantity + 1 } : item
        );
      }
      return [...prevItems, { ...product, quantity: 1 }];
    });
  };
  
  const removeFromCart = (productId) => {
    setCartItems(prevItems => 
      prevItems.filter(item => item.id !== productId)
    );
  };
  
  const updateQuantity = (productId, quantity) => {
    if (quantity <= 0) {
      removeFromCart(productId);
      return;
    }
    
    setCartItems(prevItems => 
      prevItems.map(item => 
        item.id === productId ? { ...item, quantity } : item
      )
    );
  };
  
  const clearCart = () => {
    setCartItems([]);
  };
  
  const totalItems = cartItems.reduce((sum, item) => sum + item.quantity, 0);
  const totalPrice = cartItems.reduce((sum, item) => 
    sum + (parseFloat(item.price) * item.quantity), 0);
  
  return (
    <CartContext.Provider value={{
      cartItems,
      totalItems,
      totalPrice,
      addToCart,
      removeFromCart,
      updateQuantity,
      clearCart
    }}>
      {children}
    </CartContext.Provider>
  );
}

export function useCart() {
  return useContext(CartContext);
}

================
File: src/index.css
================
:root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}
:root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #0f172a;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  padding: 0;
  min-width: 320px;
  min-height: 100vh;
  width: 100%;
  background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
}

#root {
  width: 100%;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}

================
File: src/main.jsx
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import { CartProvider } from './context/CartContext'; // This import is crucial
import './index.css';

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <CartProvider> {/* This wrapper is missing */}
      <App />
    </CartProvider>
  </React.StrictMode>
);

================
File: vite.config.js
================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  define: {
    global: 'window',
  },
})





================================================================
End of Codebase
================================================================
